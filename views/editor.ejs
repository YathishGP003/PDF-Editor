<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF Editor</title>
    <link rel="stylesheet" href="/css/style.css" />
    <script src="/tinymce/tinymce.min.js"></script>
  </head>
  <body>
    <div class="container editor-page">
      <header>
        <h1>PDF Editor</h1>
        <div class="actions">
          <button id="exportBtn" class="btn-primary">Export to PDF</button>
          <a href="/" class="btn-secondary">Upload New PDF</a>
        </div>
      </header>

      <main>
        <div class="editor-container">
          <textarea id="editor"><%= pdfContent %></textarea>
        </div>
      </main>

      <footer>
        <p>&copy; 2025 PDF to Web Editor</p>
      </footer>
    </div>

    <script>
      tinymce.init({
        selector: "#editor",
        height: 800,
        plugins: [
          "advlist",
          "autolink",
          "lists",
          "link",
          "image",
          "charmap",
          "preview",
          "anchor",
          "searchreplace",
          "visualblocks",
          "code",
          "fullscreen",
          "insertdatetime",
          "media",
          "table",
          "help",
          "wordcount",
          "pagebreak",
          "noneditable",
          "template",
          "codesample",
          "textpattern",
          "imagetools",
        ],
        toolbar: `
          undo redo | formatselect | bold italic underline strikethrough | 
          alignleft aligncenter alignright alignjustify | bullist numlist outdent indent |
          forecolor backcolor | link image media table | pagebreak | 
          removeformat | help`,
        content_style: `
          .pdf-page { 
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            position: relative;
          }
          .pdf-content { position: absolute; }
        `,
        image_advtab: true,
        file_picker_types: "image",
        images_upload_url: "/upload-image",
        noneditable_class: "pdf-content",
        height: "100vh",
        resize: true,
        autoresize_bottom_margin: 50,
        setup: function (editor) {
          editor.on("init", function () {
            // Store original formatting data
            editor.originalFormatting = new Map();
            document.querySelectorAll(".pdf-content").forEach((element) => {
              editor.originalFormatting.set(element.id, {
                style: element.style.cssText,
                position: {
                  x: element.offsetLeft,
                  y: element.offsetTop,
                },
              });
            });
          });
        },
      });

      // Handle PDF export with preserved formatting
      document
        .getElementById("exportBtn")
        .addEventListener("click", async function () {
          const editor = tinymce.get("editor");
          const content = [];

          // Collect all elements with their formatting
          editor
            .getBody()
            .querySelectorAll(".pdf-content")
            .forEach((element) => {
              const originalFormat = editor.originalFormatting.get(element.id);
              content.push({
                type: "text",
                content: element.textContent,
                fontFamily: window.getComputedStyle(element).fontFamily,
                fontSize: parseInt(window.getComputedStyle(element).fontSize),
                color: window.getComputedStyle(element).color,
                x: originalFormat.position.x,
                y: originalFormat.position.y,
                width: element.offsetWidth,
                height: element.offsetHeight,
                lineHeight: window.getComputedStyle(element).lineHeight,
                align: window.getComputedStyle(element).textAlign,
              });
            });

          // Handle images
          editor
            .getBody()
            .querySelectorAll("img")
            .forEach((img) => {
              content.push({
                type: "image",
                src: img.src,
                x: img.offsetLeft,
                y: img.offsetTop,
                width: img.width,
                height: img.height,
              });
            });

          try {
            const response = await fetch("/export", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                content: JSON.stringify(content),
                metadata: window.pdfMetadata, // Original PDF metadata
              }),
            });

            if (response.ok) {
              const blob = await response.blob();
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement("a");
              a.style.display = "none";
              a.href = url;
              a.download = "edited-document.pdf";
              document.body.appendChild(a);
              a.click();
              window.URL.revokeObjectURL(url);
            } else {
              alert("Error exporting PDF");
            }
          } catch (error) {
            console.error("Export error:", error);
            alert("Error exporting PDF");
          }
        });
    </script>
  </body>
</html>
